===============================================
% Autor: Tania Tavera Alanis
% Fecha: 23 de octubre de 2024
% ===============================================
using System;
using System.Collections.Generic;

class Program
{
    public static void Main(string[] args)
    {
        var elements = new List<int> { 1, 2, 3, 4, 5 };
        int k = 3; // Cambia este valor para obtener combinaciones de diferentes tama√±os
        var combinations = GetCombinations(elements, k);

        foreach (var combination in combinations)
        {
            Console.WriteLine($"[{string.Join(", ", combination)}]");
        }
    }

    public static List<List<T>> GetCombinations<T>(List<T> list, int k)
    {
        var result = new List<List<T>>();
        Combine(list, k, 0, new List<T>(), result);
        return result;
    }

    private static void Combine<T>(List<T> list, int k, int startIndex, List<T> currentCombination, List<List<T>> result)
    {
        if (k == 0)
        {
            result.Add(new List<T>(currentCombination));
            return;
        }

        for (int i = startIndex; i <= list.Count - k; i++)
        {
            currentCombination.Add(list[i]);
            Combine(list, k - 1, i + 1, currentCombination, result);
            currentCombination.RemoveAt(currentCombination.Count - 1);
        }
    }
}

Genera todas las combinaciones de K elementos seleccionados de una lista dada.
combination(0, _, []).
combination(K, [H|T], [H|Comb]) :- K > 0, K1 is K - 1, combination(K1, T, Comb).
combination(K, [_|T], Comb) :- K > 0, combination(K, T, Comb).
