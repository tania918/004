using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    public static void Main(string[] args)
    {
        var elements = new List<int> { 1, 2, 3, 4, 5, 6 };
        var groupSizes = new List<int> { 2, 2, 2 }; // Tamaños de los subgrupos
        var grouped = Group(elements, groupSizes);

        foreach (var group in grouped)
        {
            Console.WriteLine($"[{string.Join(", ", group)}]");
        }
    }

    public static List<List<List<T>>> Group<T>(List<T> elements, List<int> sizes)
    {
        var result = new List<List<List<T>>>();
        Group(elements, sizes, new List<List<T>>(), result);
        return result;
    }

    private static void Group<T>(List<T> elements, List<int> sizes, List<List<T>> currentGroups, List<List<List<T>>> result)
    {
        if (sizes.Count == 0)
        {
            result.Add(new List<List<T>>(currentGroups));
            return;
        }

        int groupSize = sizes[0];
        var combinations = GetCombinations(elements, groupSize);

        foreach (var combination in combinations)
        {
            var remainingElements = elements.Except(combination).ToList();
            currentGroups.Add(combination);
            Group(remainingElements, sizes.Skip(1).ToList(), currentGroups, result);
            currentGroups.RemoveAt(currentGroups.Count - 1);
        }
    }

    public static List<List<T>> GetCombinations<T>(List<T> list, int k)
    {
        var result = new List<List<T>>();
        Combine(list, k, 0, new List<T>(), result);
        return result;
    }

    private static void Combine<T>(List<T> list, int k, int startIndex, List<T> currentCombination, List<List<T>> result)
    {
        if (k == 0)
        {
            result.Add(new List<T>(currentCombination));
            return;
        }

        for (int i = startIndex; i <= list.Count - k; i++)
        {
            currentCombination.Add(list[i]);
            Combine(list, k - 1, i + 1, currentCombination, result);
            currentCombination.RemoveAt(currentCombination.Count - 1);
        }
    }
}


% Agrupa los elementos de un conjunto en subconjuntos disjuntos dados los tamaños de los subgrupos.
group([], [], []).
group([N|Ns], Es, [G|Gs]) :- combination(N, Es, G), subtract(Es, G, Rest), group(Ns, Rest, Gs).

